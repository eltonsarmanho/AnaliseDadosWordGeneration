import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from data_loader import get_datasets
import unicodedata, re, math
import numpy as np

st.set_page_config(page_title="Dashboard Longitudinal WordGen", layout="wide")

def normalizar_turma(turma_original: str) -> str:
    """Normaliza valores de turma para formato padr√£o (5¬∞ Ano, 6¬∞ Ano, etc.)"""
    if pd.isna(turma_original):
        return turma_original
    
    turma_str = str(turma_original).upper().strip()
    
    # Mapeamento de padr√µes para anos padronizados
    if any(x in turma_str for x in ['5', 'QUINTO']):
        return '5¬∞ Ano'
    elif any(x in turma_str for x in ['6', 'SEXTO']):
        return '6¬∞ Ano'
    elif any(x in turma_str for x in ['7', 'SETIMO', 'S√âTIMO']):
        return '7¬∞ Ano'
    elif any(x in turma_str for x in ['8', 'OITAVO']):
        return '8¬∞ Ano'
    elif any(x in turma_str for x in ['9', 'NONO']):
        return '9¬∞ Ano'
    else:
        # Se n√£o conseguir identificar, mant√©m original
        return turma_original

@st.cache_data(show_spinner=False)
def load_data():
    """Carrega e normaliza os datasets principais (TDE e Vocabul√°rio)."""
    tde, vocab = get_datasets()
    
    # Preservar turmas originais antes da normaliza√ß√£o para contagem correta
    if 'Turma' in tde.columns:
        tde['Turma_Original'] = tde['Turma'].copy()
        tde['Turma'] = tde['Turma'].apply(normalizar_turma)
    
    if 'Turma' in vocab.columns:
        vocab['Turma_Original'] = vocab['Turma'].copy()
        vocab['Turma'] = vocab['Turma'].apply(normalizar_turma)
    
    return tde, vocab

# ================= HEADER ====================
st.title("üìä Dashboard Longitudinal - WordGen")
st.markdown("""
Este painel permite:
- Filtrar por Escola / Turma / Fase / Prova
- Acompanhar evolu√ß√£o individual (pr√© x p√≥s) por fase
""")

# ================= LOAD DATA =================
tde_df, vocab_df = load_data()

PROVAS = {"TDE": tde_df, "VOCABUL√ÅRIO": vocab_df}

# ================= SIDEBAR ===================
st.sidebar.header("Filtros")
prova_sel = st.sidebar.selectbox("Prova", list(PROVAS.keys()))
df = PROVAS[prova_sel]

# Escolas (se vazio, mant√©m todas)
escolas = sorted(df['Escola'].dropna().unique())
escola_sel = st.sidebar.multiselect("Escola(s)", escolas, default=[])
if escola_sel:
    df = df[df['Escola'].isin(escola_sel)]

# Fases
fases = sorted(df['Fase'].dropna().unique())
fases_sel = st.sidebar.multiselect("Fase(s)", fases, default=fases)
if fases_sel:
    df = df[df['Fase'].isin(fases_sel)]

# Turmas (dependente de escolas/fases)
turmas = sorted(df['Turma'].dropna().unique())
turmas_sel = st.sidebar.multiselect("Turma(s)", turmas)
if turmas_sel:
    df = df[df['Turma'].isin(turmas_sel)]

# Nome (para acompanhamento individual)
nomes = sorted(df['Nome'].dropna().unique())
nome_sel = st.sidebar.selectbox("Aluno (Nome Completo)", ["<selecione>"] + nomes)

# ================= OVERVIEW ==================
st.subheader("Resumo Filtrado")
col1, col2, col3, col4 = st.columns(4)
col1.metric("Registros", len(df))
col2.metric("Alunos √∫nicos (Nome)", df['Nome'].nunique())
col3.metric("Escolas", df['Escola'].nunique())
# Contar turmas originais (antes da normaliza√ß√£o) para mostrar quantidade real de classes
turmas_originais = df['Turma_Original'].nunique() if 'Turma_Original' in df.columns else df['Turma'].nunique()
col4.metric("Turmas", turmas_originais)

# ================= EFFECT SIZE (COHEN'S D) ==================
def calcular_d_cohen(df_in: pd.DataFrame, col_pre: str = 'Score_Pre', col_pos: str = 'Score_Pos') -> float:
    """Calcula d de Cohen para duas medidas (pr√© e p√≥s) tratadas como grupos independentes.
    Retorna np.nan se n√£o houver dados suficientes ou vari√¢ncia nula.
    Obs: Para medidas pareadas poderia-se usar d_av ou dz; aqui segue especifica√ß√£o do usu√°rio.
    """
    if df_in is None or df_in.empty:
        return float('nan')
    pre = df_in[col_pre].dropna()
    pos = df_in[col_pos].dropna()
    n_pre, n_pos = len(pre), len(pos)
    if n_pre < 2 or n_pos < 2:
        return float('nan')
    m_pre, m_pos = pre.mean(), pos.mean()
    sd_pre, sd_pos = pre.std(ddof=1), pos.std(ddof=1)
    if (sd_pre == 0 and sd_pos == 0):
        return float('nan')
    pooled = math.sqrt(((n_pre - 1) * sd_pre**2 + (n_pos - 1) * sd_pos**2) / (n_pre + n_pos - 2)) if (n_pre + n_pos - 2) > 0 else float('nan')
    if pooled == 0 or np.isnan(pooled):
        return float('nan')
    return (m_pos - m_pre) / pooled

def classificar_geral(d: float) -> str:
    if np.isnan(d):
        return 'Sem dados'
    ad = abs(d)
    if ad < 0.2: return 'Trivial'
    if ad < 0.5: return 'Pequeno'
    if ad < 0.8: return 'M√©dio'
    return 'Grande'

def benchmark_especifico(d: float, prova: str) -> tuple[str, bool]:
    if np.isnan(d):
        return ('Sem dados', False)
    if prova == 'TDE':
        return ('Bom resultado' if d >= 0.40 else 'Ponto de aten√ß√£o', d >= 0.40)
    # Vocabul√°rio
    return ('Impacto significativo' if d >= 0.35 else 'Ponto de aten√ß√£o', d >= 0.35)

def filtrar_dataset(base: pd.DataFrame) -> pd.DataFrame:
    df_f = base.copy()
    if escola_sel:
        df_f = df_f[df_f['Escola'].isin(escola_sel)]
    if fases_sel:
        df_f = df_f[df_f['Fase'].isin(fases_sel)]
    if turmas_sel:
        df_f = df_f[df_f['Turma'].isin(turmas_sel)]
    return df_f

with st.expander('Tamanho do Efeito (d de Cohen)', expanded=True):
    # Usa o dataset filtrado atual (df) conforme PROVA selecionada
    d_val = calcular_d_cohen(df)
    prova_norm = 'TDE' if prova_sel.upper().startswith('TDE') else 'VOCAB'
    cls_espec, ok_flag = benchmark_especifico(d_val, prova_norm if prova_norm=='TDE' else 'VOCAB')
    geral_cls = classificar_geral(d_val)

    def card_unico(color_bg: str, titulo: str, valor: float, cls: str, geral: str, ok: bool):
        val_str = '‚Äî' if np.isnan(valor) else f"{valor:.2f}"
        icon = '‚úÖ' if ok else ('‚ö†Ô∏è' if not np.isnan(valor) else '')
        html = f"""
        <div style='background:{color_bg};padding:14px 18px;border-radius:10px;margin-bottom:6px;'>
          <span style='font-weight:650;font-size:15px;'>{titulo}</span><br>
          <span style='font-size:30px;font-weight:700;'>{val_str}</span> {icon}<br>
          <span style='font-size:13px;'>Benchmark: {cls} ‚Ä¢ Geral: {geral}</span>
        </div>
        """
        st.markdown(html, unsafe_allow_html=True)

    cor = '#1b7837' if ok_flag else '#fdb863'
    titulo_card = f"{prova_sel} - d de Cohen"
    card_unico(cor, titulo_card, d_val, cls_espec, geral_cls, ok_flag)

    st.caption('Crit√©rios: TDE ‚â• 0.40 (Hattie, 2009); Vocabul√°rio ‚â• 0.35 (Marulis & Neuman, 2010); Geral (Cohen, 1988): 0.2 pequeno, 0.5 m√©dio, 0.8 grande. Valores negativos indicam queda.')

# Distribui√ß√£o de scores por fase usando boxplot
if not df.empty:
    # Transformar dados para formato longo para o boxplot
    df_boxplot = df.melt(
        id_vars=['Fase'], 
        value_vars=['Score_Pre', 'Score_Pos'],
        var_name='Momento', 
        value_name='Score'
    )
    # Renomear para nomes mais amig√°veis
    df_boxplot['Momento'] = df_boxplot['Momento'].replace({
        'Score_Pre': 'Pr√©-Teste',
        'Score_Pos': 'P√≥s-Teste'
    })
    
    fig_fase = px.box(
        df_boxplot,
        x='Fase',
        y='Score',
        color='Momento',
        title='Distribui√ß√£o Pr√©-Teste vs P√≥s-Teste por Fase',
        labels={'Score': 'Score', 'Momento': 'Teste'},
        points='outliers'  # Mostra apenas outliers como pontos
    )
    fig_fase.update_layout(
        legend_title_text='Teste',
        showlegend=True
    )
    st.plotly_chart(fig_fase, use_container_width=True)

    # ---------------- EVOLU√á√ÉO AGRUPADA POR ESCOLA (Plotly Line) ----------------
    st.markdown("### Evolu√ß√£o Comparativa entre Escolas")
    st.caption("Cada linha representa a m√©dia de Delta (P√≥s - Pr√©) da escola por fase. Passe o mouse para ver detalhes.")

    with st.expander("Op√ß√µes avan√ßadas de visualiza√ß√£o", expanded=False):
        agrupar = st.checkbox("Agrupar nomes equivalentes de escolas", value=True, help="Normaliza acentos, caixa e remove termos comuns.")
        preencher_faltantes = st.checkbox("Preencher fases ausentes com m√©dia da fase", value=True)
        normalizar = st.checkbox("Mostrar valores normalizados (z-score por fase)", value=False, help="Z-score √© uma medida de dist√¢ncia para a m√©dia de um conjunto de dados. Valores positivos indicam acima da m√©dia, negativos abaixo. √ötil para comparar tend√™ncias entre escolas com diferentes n√≠veis de desempenho.")
        ordenar = st.checkbox("Ordenar legenda por m√©dia de Delta (desc)", value=True)

    def normaliza_escola(nome: str) -> str:
        if pd.isna(nome):
            return nome
        s = unicodedata.normalize('NFD', nome)
        s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn').upper()
        s = re.sub(r"[^A-Z0-9 ]+", " ", s)
        s = re.sub(r"\b(EMEB|EMEF|EME|ESCOLA MUNICIPAL|ESC MUNICIPAL|ESC MUN|ESCOLA)\b", " ", s)
        s = re.sub(r"\s+", " ", s).strip()
        return s

    df_lin = df.copy()
    df_lin['Delta'] = df_lin['Score_Pos'] - df_lin['Score_Pre']
    if agrupar:
        df_lin['Escola_Base'] = df_lin['Escola'].apply(normaliza_escola)
    else:
        df_lin['Escola_Base'] = df_lin['Escola']

    agrup_mean = (df_lin.groupby(['Escola_Base','Fase'])['Delta']
                        .mean()
                        .reset_index())
    # Reindex para preencher fases faltantes se necess√°rio
    if preencher_faltantes:
        fases_ord = sorted(set(fases_sel))
        todas = pd.MultiIndex.from_product([agrup_mean['Escola_Base'].unique(), fases_ord], names=['Escola_Base','Fase'])
        agrup_mean = (agrup_mean.set_index(['Escola_Base','Fase'])
                                   .reindex(todas)
                                   .reset_index())
    # Preencher valores faltantes com m√©dia da fase
    if preencher_faltantes:
        fase_means = agrup_mean.groupby('Fase')['Delta'].transform(lambda s: s.fillna(s.mean()))
        agrup_mean['Delta'] = agrup_mean['Delta'].fillna(fase_means)

    # Remover escolas com menos de 2 valores n√£o nulos
    valid_counts = agrup_mean.dropna(subset=['Delta']).groupby('Escola_Base')['Delta'].count()
    keep_escolas = valid_counts[valid_counts >= 2].index
    agrup_mean = agrup_mean[agrup_mean['Escola_Base'].isin(keep_escolas)]

    if agrup_mean.empty:
        st.info("Sem dados suficientes para plotar linhas.")
    else:
        # Ordena legenda por m√©dia se solicitado
        media_por_escola = agrup_mean.groupby('Escola_Base')['Delta'].mean()
        if ordenar:
            ordem = media_por_escola.sort_values(ascending=False).index
        else:
            ordem = sorted(media_por_escola.index)
        agrup_mean['Escola_Base'] = pd.Categorical(agrup_mean['Escola_Base'], categories=ordem, ordered=True)

        # Normaliza√ß√£o opcional apenas para a visualiza√ß√£o
        if normalizar:
            agrup_mean['Delta_Vis'] = agrup_mean.groupby('Fase')['Delta'].transform(lambda c: (c - c.mean())/c.std(ddof=0) if c.std(ddof=0) not in (0,None) else 0)
            y_col = 'Delta_Vis'
            y_label = 'Delta (z-score)'
        else:
            y_col = 'Delta'
            y_label = 'Delta (P√≥s - Pr√©)'

        agrup_mean['Fase'] = pd.Categorical(agrup_mean['Fase'], categories=sorted(set(fases_sel)), ordered=True)

        # Adicionar m√©dia geral para hover
        media_geral = agrup_mean.groupby('Escola_Base')['Delta'].transform('mean')
        agrup_mean['Media_Geral_Delta'] = media_geral

        # customdata para hover (Escola Base, Delta real, M√©dia Geral real)
        agrup_mean = agrup_mean.sort_values(['Escola_Base','Fase'])
        custom_cols = ['Escola_Base','Delta','Media_Geral_Delta']

        # Criar coluna num√©rica para eixo ordinal
        fase_map = {'2':2,'3':3,'4':4}
        agrup_mean['FaseNum'] = agrup_mean['Fase'].astype(str).map(fase_map)

        fig_lines = px.line(
            agrup_mean,
            x='FaseNum', y=y_col, color='Escola_Base',
            category_orders={'Escola_Base': list(ordem)},
            custom_data=custom_cols,
            markers=True,
            labels={'FaseNum':'Fase','Escola_Base':'Escola', y_col: y_label}
        )
        hover_label_name = y_label
        fig_lines.update_traces(
            hovertemplate=(
                '<b>%{customdata[0]}</b><br>'
                'Fase: %{x}<br>'
                + hover_label_name + ': %{y:.2f}<br>'
                'Delta Real: %{customdata[1]:.2f}<br>'
                'M√©dia Geral Delta: %{customdata[2]:.2f}<extra></extra>'
            ),
            opacity=0.8
        )
        fig_lines.update_layout(
            legend_title_text='Escola',
            yaxis_title=y_label,
            xaxis=dict(tickmode='array', tickvals=[2,3,4], ticktext=['2','3','4'], title='Fase')
        )
        st.plotly_chart(fig_lines, use_container_width=True)

# ================= AN√ÅLISE GRANULAR POR QUEST√ÉO ==================
st.markdown("### An√°lise Granular por Quest√£o")
st.caption("An√°lise detalhada do desempenho por quest√£o espec√≠fica, mostrando evolu√ß√£o e compet√™ncias melhor assimiladas.")

if not df.empty:
    # Identificar colunas de quest√µes (Q1_Pre, Q1_Pos, Q2_Pre, Q2_Pos, etc.)
    questao_cols = [col for col in df.columns if col.startswith('Q') and ('_Pre' in col or '_Pos' in col)]
    
    if questao_cols:
        # Extrair n√∫meros das quest√µes dispon√≠veis
        questoes_nums = set()
        for col in questao_cols:
            if '_Pre' in col:
                q_num = col.split('_Pre')[0]
                questoes_nums.add(q_num)
        
        questoes_nums = sorted(list(questoes_nums), key=lambda x: int(x[1:]))  # Ordenar Q1, Q2, Q3...
        
        # 1. Calcular percentual de acerto por quest√£o
        analise_questoes = []
        
        for q_num in questoes_nums:
            col_pre = f"{q_num}_Pre"
            col_pos = f"{q_num}_Pos"
            
            if col_pre in df.columns and col_pos in df.columns:
                # Calcular percentuais (assumindo que 1 = acerto, 0 = erro)
                pct_pre = (df[col_pre].sum() / df[col_pre].count()) * 100 if df[col_pre].count() > 0 else 0
                pct_pos = (df[col_pos].sum() / df[col_pos].count()) * 100 if df[col_pos].count() > 0 else 0
                variacao = pct_pos - pct_pre
                
                analise_questoes.append({
                    'Quest√£o': q_num,
                    '% Acerto Pr√©': pct_pre,
                    '% Acerto P√≥s': pct_pos,
                    'Varia√ß√£o (%)': variacao
                })
        
        if analise_questoes:
            df_analise = pd.DataFrame(analise_questoes)
            
            # 2. Tabela de Evolu√ß√£o por Compet√™ncia (ordenada pela maior varia√ß√£o)
            df_analise_sorted = df_analise.sort_values('Varia√ß√£o (%)', ascending=False)
            
            st.markdown("#### Tabela de Evolu√ß√£o por Compet√™ncia")
            st.caption("Quest√µes ordenadas pela maior varia√ß√£o (melhoria) no percentual de acerto")
            
            # Formata√ß√£o da tabela com cores
            def style_variacao(val):
                if pd.isna(val):
                    return ''
                elif val > 0:
                    return 'background-color: #e8f5e8; color: #2d5016; font-weight: bold'  # Verde
                elif val < 0:
                    return 'background-color: #fdf2f2; color: #721c24; font-weight: bold'  # Vermelho
                else:
                    return 'background-color: #f1f3f4; color: #495057; font-weight: bold'  # Cinza
            
            styled_analise = (df_analise_sorted.style
                             .applymap(style_variacao, subset=['Varia√ß√£o (%)'])
                             .format({
                                 '% Acerto Pr√©': '{:.1f}%',
                                 '% Acerto P√≥s': '{:.1f}%',
                                 'Varia√ß√£o (%)': '{:+.1f}%'
                             }))
            
            st.dataframe(styled_analise, use_container_width=True)
            
            # 3. Gr√°fico Lollipop
            st.markdown("#### Gr√°fico de Evolu√ß√£o por Quest√£o (Lollipop)")
            st.caption("Compara√ß√£o visual do desempenho pr√© vs p√≥s por quest√£o. Linhas conectam os percentuais, mostrando a evolu√ß√£o.")
            
            # Preparar dados para o gr√°fico lollipop
            df_lollipop = df_analise.copy()
            df_lollipop = df_lollipop.sort_values('Varia√ß√£o (%)', ascending=True)  # Melhor varia√ß√£o no topo
            
            # Criar gr√°fico lollipop usando plotly
            fig_lollipop = go.Figure()
            
            # Adicionar linhas conectoras
            for i, row in df_lollipop.iterrows():
                fig_lollipop.add_trace(go.Scatter(
                    x=[row['% Acerto Pr√©'], row['% Acerto P√≥s']],
                    y=[row['Quest√£o'], row['Quest√£o']],
                    mode='lines',
                    line=dict(color='lightgray', width=2),
                    showlegend=False,
                    hoverinfo='skip'
                ))
            
            # Adicionar pontos do Pr√©-teste
            fig_lollipop.add_trace(go.Scatter(
                x=df_lollipop['% Acerto Pr√©'],
                y=df_lollipop['Quest√£o'],
                mode='markers',
                marker=dict(color='#dc3545', size=8),
                name='Pr√©-Teste',
                hovertemplate='<b>%{y}</b><br>Pr√©-Teste: %{x:.1f}%<extra></extra>'
            ))
            
            # Adicionar pontos do P√≥s-teste
            fig_lollipop.add_trace(go.Scatter(
                x=df_lollipop['% Acerto P√≥s'],
                y=df_lollipop['Quest√£o'],
                mode='markers',
                marker=dict(color='#28a745', size=8),
                name='P√≥s-Teste',
                hovertemplate='<b>%{y}</b><br>P√≥s-Teste: %{x:.1f}%<extra></extra>'
            ))
            
            # Adicionar linha horizontal separando quest√µes com varia√ß√£o positiva/neutra das negativas
            # Encontrar a posi√ß√£o da linha divis√≥ria (entre varia√ß√£o >= 0 e < 0)
            questoes_positivas = df_lollipop[df_lollipop['Varia√ß√£o (%)'] >= 0]
            questoes_negativas = df_lollipop[df_lollipop['Varia√ß√£o (%)'] < 0]
            
            if len(questoes_negativas) > 0 and len(questoes_positivas) > 0:
                # Encontrar a posi√ß√£o entre a √∫ltima quest√£o negativa e a primeira positiva
                ultima_negativa_idx = df_lollipop[df_lollipop['Varia√ß√£o (%)'] < 0].index[-1]
                primeira_positiva_idx = df_lollipop[df_lollipop['Varia√ß√£o (%)'] >= 0].index[0]
                
                # Como os dados est√£o ordenados por varia√ß√£o crescente, a linha vai entre essas posi√ß√µes
                posicao_linha = (df_lollipop.index.get_loc(ultima_negativa_idx) + 
                               df_lollipop.index.get_loc(primeira_positiva_idx)) / 2
                
                # Adicionar linha horizontal
                fig_lollipop.add_hline(
                    y=posicao_linha,
                    line_dash="dash",
                    line_color="orange",
                    line_width=2,
                    opacity=0.7,
                    annotation_text="Limite Melhoria/Decl√≠nio",
                    annotation_position="top right",
                    annotation_font_size=12,
                    annotation_font_color="orange"
                )
            
            fig_lollipop.update_layout(
                title='Evolu√ß√£o do Percentual de Acerto por Quest√£o',
                xaxis_title='Percentual de Acerto (%)',
                yaxis_title='Quest√£o',
                showlegend=True,
                height=max(400, len(questoes_nums) * 25),  # Altura din√¢mica baseada no n√∫mero de quest√µes
                margin=dict(l=80, r=20, t=60, b=40)
            )
            
            st.plotly_chart(fig_lollipop, use_container_width=True)
            
            # Insights adicionais
            with st.expander("üí° An√°lise Granular", expanded=False):
                melhor_questao = df_analise_sorted.iloc[0]
                pior_questao = df_analise_sorted.iloc[-1]
                media_variacao = df_analise['Varia√ß√£o (%)'].mean()
                
                st.markdown(f"""
                **üìà Maior Melhoria:** {melhor_questao['Quest√£o']} com varia√ß√£o de **{melhor_questao['Varia√ß√£o (%)']:+.1f}%**
                
                **üìâ Menor Melhoria:** {pior_questao['Quest√£o']} com varia√ß√£o de **{pior_questao['Varia√ß√£o (%)']:+.1f}%**
                
                **üìä Varia√ß√£o M√©dia:** **{media_variacao:+.1f}%** entre todas as quest√µes
                
                **üéØ Quest√µes com Melhoria Significativa (>10% na varia√ß√£o):** {len(df_analise[df_analise['Varia√ß√£o (%)'] > 10])} quest√µes
                
                **‚ö†Ô∏è Quest√µes com Decl√≠nio:** {len(df_analise[df_analise['Varia√ß√£o (%)'] < 0])} quest√µes
                """)
        else:
            st.info("N√£o foram encontradas quest√µes com dados v√°lidos para an√°lise.")
    else:
        st.info("Dataset n√£o cont√©m colunas de quest√µes individuais (Q1_Pre, Q1_Pos, etc.).")
else:
    st.info("Nenhum dado dispon√≠vel para an√°lise granular.")

# ================= EVOLU√á√ÉO INDIVIDUAL ==================
st.subheader("Evolu√ß√£o Individual (Pr√© vs P√≥s por Fase)")
if nome_sel and nome_sel != "<selecione>":
    df_ind = df[df['Nome'] == nome_sel].sort_values('Fase')
    if df_ind.empty:
        st.info("Aluno n√£o encontrado com filtros atuais.")
    else:
        # Tabela detalhada
        df_show = df_ind[['Fase','Escola','Turma','Score_Pre','Score_Pos']].copy()
        df_show['Delta'] = df_show['Score_Pos'] - df_show['Score_Pre']
        # Renomear colunas para nomes mais amig√°veis
        df_show = df_show.rename(columns={
            'Score_Pre': 'Pr√©-Teste',
            'Score_Pos': 'P√≥s-Teste'
        })
        
        # Fun√ß√£o para estilizar a coluna Delta com cores melhoradas e fonte em negrito
        def style_delta(val):
            if pd.isna(val):
                return ''
            elif val > 0:
                return 'background-color: #e8f5e8; color: #2d5016; font-weight: bold; border-left: 4px solid #28a745'  # Verde mais suave
            elif val == 0:
                return 'background-color: #f1f3f4; color: #495057; font-weight: bold; border-left: 4px solid #6c757d'  # Cinza neutro
            else:  # val < 0
                return 'background-color: #fdf2f2; color: #721c24; font-weight: bold; border-left: 4px solid #dc3545'  # Vermelho mais suave
        
        # Aplicar estilo √† tabela com formata√ß√£o de n√∫meros
        styled_df = (df_show.style
                     .applymap(style_delta, subset=['Delta'])
                     .format({
                         'Pr√©-Teste': '{:.1f}',
                         'P√≥s-Teste': '{:.1f}',
                         'Delta': '{:+.1f}'  # Formato com sinal + ou -
                     }))
        st.dataframe(styled_df, use_container_width=True)

        # Gr√°ficos lado a lado: Pr√©/P√≥s-Teste e Delta
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de Pr√©-Teste vs P√≥s-Teste (sem Delta)
            long_scores = (df_ind.melt(id_vars=['Fase'], value_vars=['Score_Pre','Score_Pos'],
                                      var_name='Momento', value_name='Score')
                                 .replace({'Score_Pre':'Pr√©-Teste','Score_Pos':'P√≥s-Teste'}))
            
            fig_scores = px.line(long_scores, x='Fase', y='Score', color='Momento', markers=True,
                               title=f'Evolu√ß√£o Pr√© vs P√≥s - {nome_sel}',
                               labels={'Momento': 'Teste'})
            
            # Configurar eixo X com ticks discretos
            fig_scores.update_layout(
                xaxis=dict(
                    tickmode='array',
                    tickvals=[2, 3, 4],
                    ticktext=['2', '3', '4'],
                    title='Fase'
                )
            )
            st.plotly_chart(fig_scores, use_container_width=True)
        
        with col2:
            # Gr√°fico somente do Delta
            df_delta = df_ind.copy()
            df_delta['Delta'] = df_delta['Score_Pos'] - df_delta['Score_Pre']
            
            fig_delta = px.line(df_delta, x='Fase', y='Delta', markers=True,
                              title=f'Evolu√ß√£o Delta - {nome_sel}',
                              labels={'Delta': 'Delta (P√≥s - Pr√©)'})
            
            # Configurar eixo X com ticks discretos e adicionar linha zero de refer√™ncia
            fig_delta.update_layout(
                xaxis=dict(
                    tickmode='array',
                    tickvals=[2, 3, 4],
                    ticktext=['2', '3', '4'],
                    title='Fase'
                )
            )
            # Adicionar linha horizontal no zero para refer√™ncia
            fig_delta.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)
            
            st.plotly_chart(fig_delta, use_container_width=True)

        # Deltas
        # fig_delta = px.bar(df_show, x='Fase', y='Delta', title='Delta (P√≥s - Pr√©) por Fase',
        #                    text='Delta')
        # st.plotly_chart(fig_delta, use_container_width=True)
else:
    st.info("Selecione um aluno para ver evolu√ß√£o individual.")

# (Se√ß√£o de continuidade longitudinal removida conforme solicita√ß√£o do usu√°rio)
# (Se√ß√£o de distribui√ß√£o de deltas removida conforme solicita√ß√£o do usu√°rio)

# ================= FOOTER ==================
st.markdown("---")
st.caption("Dashboard gerado automaticamente - WordGen ‚Ä¢ Utilize filtros na barra lateral para refinar a an√°lise.")

