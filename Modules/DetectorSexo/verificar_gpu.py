#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verifica disponibilidade de GPU para Ollama
"""

import subprocess
import os

def verificar_nvidia_gpu():
    """Verifica se h√° GPU NVIDIA dispon√≠vel"""
    print("="*70)
    print("VERIFICA√á√ÉO DE GPU")
    print("="*70)
    
    # Verifica nvidia-smi
    print("\n1Ô∏è‚É£  Verificando NVIDIA GPU...")
    try:
        result = subprocess.run(
            ['nvidia-smi', '--query-gpu=name,memory.total,driver_version', '--format=csv,noheader'],
            capture_output=True,
            text=True,
            timeout=5
        )
        
        if result.returncode == 0:
            gpus = result.stdout.strip().split('\n')
            print(f"‚úÖ {len(gpus)} GPU(s) NVIDIA detectada(s):")
            for i, gpu_info in enumerate(gpus):
                print(f"   GPU {i}: {gpu_info}")
            return True
        else:
            print("‚ùå nvidia-smi falhou")
            return False
    except FileNotFoundError:
        print("‚ùå nvidia-smi n√£o encontrado (drivers NVIDIA n√£o instalados)")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar GPU: {str(e)}")
        return False

def verificar_ollama_gpu():
    """Verifica se Ollama est√° configurado para usar GPU"""
    print("\n2Ô∏è‚É£  Verificando configura√ß√£o Ollama...")
    
    try:
        # Verifica se Ollama est√° rodando
        result = subprocess.run(
            ['ollama', 'list'],
            capture_output=True,
            text=True,
            timeout=5
        )
        
        if result.returncode == 0:
            print("‚úÖ Ollama est√° rodando")
            
            # Lista modelos dispon√≠veis
            modelos = result.stdout.strip().split('\n')[1:]  # Pula header
            if modelos:
                print(f"\nüì¶ Modelos dispon√≠veis:")
                for modelo in modelos:
                    if modelo.strip():
                        print(f"   - {modelo}")
                        
                # Verifica se o modelo brasileiro est√° dispon√≠vel
                if any('Gemma-3-Gaia-PT-BR' in m for m in modelos):
                    print("\n‚úÖ Modelo brasileiro Gemma-3-Gaia-PT-BR encontrado!")
                else:
                    print("\n‚ö†Ô∏è  Modelo brasileiro n√£o encontrado. Para instalar:")
                    print("   ollama pull brunoconterato/Gemma-3-Gaia-PT-BR-4b-it:f16")
            
            return True
        else:
            print("‚ùå Ollama n√£o est√° respondendo")
            return False
            
    except FileNotFoundError:
        print("‚ùå Ollama n√£o est√° instalado")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar Ollama: {str(e)}")
        return False

def testar_velocidade_gpu():
    """Testa velocidade de infer√™ncia com GPU"""
    print("\n3Ô∏è‚É£  Testando velocidade de infer√™ncia...")
    
    import time
    
    prompt = "Qual o sexo do nome JO√ÉO?"
    
    try:
        print("   Executando teste com modelo...")
        start_time = time.time()
        
        result = subprocess.run(
            ['ollama', 'run', 'brunoconterato/Gemma-3-Gaia-PT-BR-4b-it:f16', prompt],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        elapsed = time.time() - start_time
        
        if result.returncode == 0:
            print(f"   ‚úÖ Resposta recebida em {elapsed:.2f}s")
            print(f"   Resposta: {result.stdout.strip()[:100]}...")
            
            if elapsed < 10:
                print("\nüöÄ EXCELENTE! GPU est√° acelerando significativamente (< 10s)")
            elif elapsed < 30:
                print("\n‚úÖ BOM! GPU est√° funcionando adequadamente (10-30s)")
            else:
                print("\n‚ö†Ô∏è  GPU pode n√£o estar sendo usada efetivamente (> 30s)")
                print("   Verifique se Ollama est√° configurado para usar GPU")
            
            return True
        else:
            print(f"   ‚ùå Erro na execu√ß√£o")
            return False
            
    except subprocess.TimeoutExpired:
        print("   ‚ùå Timeout (> 30s) - GPU provavelmente n√£o est√° sendo usada")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
        return False

def recomendar_configuracao():
    """Recomenda configura√ß√£o ideal"""
    print("\n" + "="*70)
    print("RECOMENDA√á√ïES")
    print("="*70)
    
    print("\nüí° Para melhor desempenho:")
    print("   1. Certifique-se de ter drivers NVIDIA atualizados")
    print("   2. Configure Ollama para usar GPU:")
    print("      export CUDA_VISIBLE_DEVICES=0")
    print("      ollama serve")
    print("   3. Use processamento paralelo (4-8 workers)")
    print("   4. Execute com GPU habilitada:")
    print("      python detector_sexo_hibrido.py")
    print("\nüìä Estimativas de tempo com 2.588 nomes:")
    print("   - Sem GPU: ~43 horas (60s por nome)")
    print("   - Com GPU: ~4-7 horas (5-10s por nome)")
    print("   - Com GPU + 4 workers: ~1-2 horas")

def main():
    gpu_ok = verificar_nvidia_gpu()
    ollama_ok = verificar_ollama_gpu()
    
    if gpu_ok and ollama_ok:
        testar_velocidade_gpu()
    
    recomendar_configuracao()

if __name__ == "__main__":
    main()
