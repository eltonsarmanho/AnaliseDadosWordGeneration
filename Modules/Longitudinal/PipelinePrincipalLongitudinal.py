#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PIPELINE PRINCIPAL - AN√ÅLISE LONGITUDINAL WORDGEN
Executa an√°lise completa longitudinal das Fases 2, 3 e 4 para TDE e Vocabul√°rio

Este script executa:
1. Pipeline de dados longitudinais TDE
2. Pipeline de dados longitudinais Vocabul√°rio  
3. Gera√ß√£o do relat√≥rio visual HTML

Autor: Sistema de An√°lise WordGen
Data: 2024
"""

import sys
import pathlib
from datetime import datetime

# Adicionar o diret√≥rio base ao path
BASE_DIR = pathlib.Path(__file__).parent.parent.parent.resolve()
sys.path.append(str(BASE_DIR))

# Imports dos m√≥dulos longitudinais
from Modules.Longitudinal.TDE.PipelineDataLongitudinalTDE import PipelineDataLongitudinalTDE
from Modules.Longitudinal.Vocabulario.PipelineDataLongitudinalVocabulario import PipelineDataLongitudinalVocabulario
from Modules.Longitudinal.RelatorioVisualLongitudinal import main as gerar_relatorio

def executar_pipeline_completo():
    """Executa o pipeline completo de an√°lise longitudinal"""
    
    print("üöÄ INICIANDO AN√ÅLISE LONGITUDINAL WORDGEN")
    print("="*60)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    print("üìä Fases analisadas: 2, 3 e 4")
    print("üéØ Foco: Acertos e melhorias (n√£o evidenciando erros)")
    print("="*60)
    
    try:
        # ETAPA 1: Pipeline TDE
        print("\nüîÑ ETAPA 1: Processando dados longitudinais TDE...")
        print("-" * 50)
        
        pipeline_tde = PipelineDataLongitudinalTDE()
        sucesso_tde = pipeline_tde.executar_pipeline()
        
        if sucesso_tde:
            print("‚úÖ Pipeline TDE conclu√≠do com sucesso!")
        else:
            print("‚ö†Ô∏è Pipeline TDE conclu√≠do com avisos")
        
        # ETAPA 2: Pipeline Vocabul√°rio
        print("\nüîÑ ETAPA 2: Processando dados longitudinais Vocabul√°rio...")
        print("-" * 50)
        
        pipeline_vocab = PipelineDataLongitudinalVocabulario()
        sucesso_vocab = pipeline_vocab.executar_pipeline()
        
        if sucesso_vocab:
            print("‚úÖ Pipeline Vocabul√°rio conclu√≠do com sucesso!")
        else:
            print("‚ö†Ô∏è Pipeline Vocabul√°rio conclu√≠do com avisos")
        
        # ETAPA 3: Relat√≥rio Visual
        print("\nüé® ETAPA 3: Gerando Relat√≥rio Visual HTML...")
        print("-" * 50)
        
        sucesso_relatorio = gerar_relatorio()
        
        if sucesso_relatorio:
            print("‚úÖ Relat√≥rio Visual gerado com sucesso!")
        else:
            print("‚ùå Erro na gera√ß√£o do relat√≥rio visual")
        
        # RESUMO FINAL
        print("\n" + "="*60)
        print("üéâ AN√ÅLISE LONGITUDINAL CONCLU√çDA!")
        print("="*60)
        
        print(f"\nüìã RESUMO DA EXECU√á√ÉO:")
        print(f"   ‚Ä¢ Pipeline TDE: {'‚úÖ Sucesso' if sucesso_tde else '‚ö†Ô∏è Avisos'}")
        print(f"   ‚Ä¢ Pipeline Vocabul√°rio: {'‚úÖ Sucesso' if sucesso_vocab else '‚ö†Ô∏è Avisos'}")
        print(f"   ‚Ä¢ Relat√≥rio Visual: {'‚úÖ Sucesso' if sucesso_relatorio else '‚ùå Erro'}")
        
        print(f"\nüìÅ ARQUIVOS GERADOS:")
        print(f"   ‚Ä¢ Dados TDE: Modules/Longitudinal/Data/dados_longitudinais_TDE.csv")
        print(f"   ‚Ä¢ Dados Vocabul√°rio: Modules/Longitudinal/Data/dados_longitudinais_Vocabulario.csv")
        print(f"   ‚Ä¢ Resumo TDE: Modules/Longitudinal/Data/resumo_longitudinal_TDE.json")
        print(f"   ‚Ä¢ Resumo Vocabul√°rio: Modules/Longitudinal/Data/resumo_longitudinal_Vocabulario.json")
        print(f"   ‚Ä¢ Relat√≥rio HTML: Modules/Longitudinal/Data/relatorio_visual_longitudinal.html")
        print(f"   ‚Ä¢ Figuras: Modules/Longitudinal/Data/figures/")
        
        print(f"\nüåê COMO VISUALIZAR:")
        print(f"   1. Abra o arquivo 'relatorio_visual_longitudinal.html' em um navegador")
        print(f"   2. O relat√≥rio cont√©m an√°lises interativas e visualiza√ß√µes")
        print(f"   3. Foco nos acertos e melhorias dos estudantes")
        
        if sucesso_tde and sucesso_vocab and sucesso_relatorio:
            print(f"\nüéØ STATUS FINAL: ‚úÖ SUCESSO TOTAL")
            return True
        else:
            print(f"\nüéØ STATUS FINAL: ‚ö†Ô∏è CONCLU√çDO COM AVISOS")
            return True
            
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        print(f"üîß Verifique os dados das Fases 2, 3 e 4")
        return False

def main():
    """Fun√ß√£o principal"""
    return executar_pipeline_completo()

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)
