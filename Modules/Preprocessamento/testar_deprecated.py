#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TESTE DE AVISOS DEPRECATED DO STREAMLIT/PLOTLY
Verifica se a corre√ß√£o dos par√¢metros deprecated foi bem-sucedida
"""

import sys
import re
import warnings
from pathlib import Path

def verificar_parametros_deprecated():
    """Verifica se h√° par√¢metros deprecated no c√≥digo"""
    print("üîç VERIFICANDO PAR√ÇMETROS DEPRECATED NO DASHBOARD")
    print("=" * 60)
    
    dashboard_path = Path("Dashboard/app.py")
    
    if not dashboard_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {dashboard_path}")
        return False
    
    # Ler conte√∫do do arquivo
    with open(dashboard_path, 'r', encoding='utf-8') as f:
        conteudo = f.read()
    
    # Padr√µes deprecated para verificar
    padroes_deprecated = [
        (r'st\.plotly_chart\([^)]*width\s*=\s*["\']stretch["\']', 'st.plotly_chart(..., width="stretch")'),
        (r'st\.plotly_chart\([^)]*height\s*=\s*["\']stretch["\']', 'st.plotly_chart(..., height="stretch")'),
        (r'st\.dataframe\([^)]*width\s*=\s*["\']stretch["\']', 'st.dataframe(..., width="stretch")'),
        (r'st\.dataframe\([^)]*height\s*=\s*["\']stretch["\']', 'st.dataframe(..., height="stretch")'),
    ]
    
    problemas_encontrados = []
    
    for padrao, descricao in padroes_deprecated:
        matches = re.finditer(padrao, conteudo, re.MULTILINE | re.DOTALL)
        for match in matches:
            # Encontrar linha do problema
            linha_num = conteudo[:match.start()].count('\n') + 1
            linha_conteudo = conteudo.split('\n')[linha_num - 1].strip()
            problemas_encontrados.append({
                'linha': linha_num,
                'conteudo': linha_conteudo,
                'problema': descricao
            })
    
    if problemas_encontrados:
        print(f"‚ùå ENCONTRADOS {len(problemas_encontrados)} PROBLEMAS:")
        for problema in problemas_encontrados:
            print(f"  Linha {problema['linha']}: {problema['problema']}")
            print(f"    C√≥digo: {problema['conteudo']}")
        return False
    else:
        print("‚úÖ NENHUM PAR√ÇMETRO DEPRECATED ENCONTRADO!")
    
    # Verificar se os par√¢metros corretos est√£o sendo usados
    print(f"\nüîç VERIFICANDO PAR√ÇMETROS CORRETOS:")
    
    # Contar use_container_width=True
    count_container_width = len(re.findall(r'use_container_width\s*=\s*True', conteudo))
    print(f"  ‚úÖ use_container_width=True: {count_container_width} ocorr√™ncias")
    
    # Contar st.plotly_chart
    count_plotly_chart = len(re.findall(r'st\.plotly_chart\(', conteudo))
    print(f"  üìä st.plotly_chart: {count_plotly_chart} ocorr√™ncias")
    
    # Contar st.dataframe
    count_dataframe = len(re.findall(r'st\.dataframe\(', conteudo))
    print(f"  üìã st.dataframe: {count_dataframe} ocorr√™ncias")
    
    print(f"\nüìà RESUMO DA CORRE√á√ÉO:")
    print(f"  ‚úÖ Todas as chamadas st.plotly_chart corrigidas")
    print(f"  ‚úÖ Todas as chamadas st.dataframe corrigidas")
    print(f"  ‚úÖ Par√¢metro width='stretch' ‚Üí use_container_width=True")
    
    return True

def verificar_imports_streamlit():
    """Verifica se os imports est√£o corretos"""
    print(f"\nüîç VERIFICANDO IMPORTS:")
    
    try:
        import streamlit as st
        print(f"  ‚úÖ Streamlit: {st.__version__}")
        
        import plotly
        print(f"  ‚úÖ Plotly: {plotly.__version__}")
        
        # Verificar se use_container_width est√° dispon√≠vel
        if hasattr(st, 'plotly_chart'):
            print(f"  ‚úÖ st.plotly_chart dispon√≠vel")
        
        return True
    except ImportError as e:
        print(f"  ‚ùå Erro de import: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE DE CORRE√á√ÉO - PAR√ÇMETROS DEPRECATED")
    print("=" * 70)
    print("Verificando se a corre√ß√£o dos avisos deprecated foi bem-sucedida")
    print()
    
    try:
        # 1. Verificar par√¢metros deprecated
        sucesso_parametros = verificar_parametros_deprecated()
        
        # 2. Verificar imports
        sucesso_imports = verificar_imports_streamlit()
        
        print("\n" + "=" * 70)
        if sucesso_parametros and sucesso_imports:
            print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
            print("üéØ Todas as corre√ß√µes aplicadas corretamente:")
            print("  ‚Ä¢ width='stretch' ‚Üí use_container_width=True")
            print("  ‚Ä¢ Par√¢metros deprecated removidos")
            print("  ‚Ä¢ Compatibilidade com vers√µes mais recentes")
            return 0
        else:
            print("‚ùå TESTE FALHOU!")
            print("üîß Ainda h√° problemas que precisam ser corrigidos")
            return 1
            
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())