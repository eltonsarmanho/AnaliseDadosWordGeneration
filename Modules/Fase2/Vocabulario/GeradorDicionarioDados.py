import pandas as pd
import os
import sys
import pathlib
from datetime import datetime
import json

# Configurar caminhos
current_dir = pathlib.Path(__file__).parent.parent.parent.resolve()
data_dir = str(current_dir) + '/Data'

def carregar_mapeamento_palavras():
    """Carrega o mapeamento das quest√µes para palavras"""
    arquivo_respostas = os.path.join(data_dir, 'RespostaVocabulario.json')
    try:
        with open(arquivo_respostas, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # O arquivo √© uma lista de objetos, vamos converter para dicion√°rio
        mapeamento = {}
        for i, item in enumerate(data, 1):
            q_key = f'Q{i}'
            if q_key in item:
                palavra_trabalhada = item[q_key].get('Palavra Trabalhada', f'Palavra_{i}')
                palavra_correta = item[q_key].get('Palavra Correta', 'N/A')
                mapeamento[str(i)] = {
                    'palavra_trabalhada': palavra_trabalhada,
                    'palavra_correta': palavra_correta
                }
        
        return mapeamento
    except Exception as e:
        print(f"Erro ao carregar mapeamento de palavras: {e}")
        return {}

def gerar_dicionario_dados():
    """Gera dicion√°rio de dados completo em formato TXT"""
    
    print("="*80)
    print("GERADOR DE DICION√ÅRIO DE DADOS - TABELA BRUTA FASE 2")
    print("="*80)
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*80)
    
    # Verificar se a tabela existe
    arquivo_excel = os.path.join(data_dir, 'tabela_bruta_fase2_vocabulario_wordgen.xlsx')
    arquivo_csv = os.path.join(data_dir, 'tabela_bruta_fase2_vocabulario_wordgen.csv')
    
    if not os.path.exists(arquivo_excel) and not os.path.exists(arquivo_csv):
        print("‚ùå Tabela bruta n√£o encontrada!")
        print("Execute primeiro: python PipelineTabelaBrutaCLI.py --gerar")
        return
    
    # Carregar dados para obter informa√ß√µes das colunas
    if os.path.exists(arquivo_excel):
        print("üìä Carregando dados do arquivo Excel...")
        df = pd.read_excel(arquivo_excel, nrows=5)  # Apenas primeiras linhas para estrutura
    else:
        print("üìä Carregando dados do arquivo CSV...")
        df = pd.read_csv(arquivo_csv, nrows=5, encoding='utf-8-sig')
    
    # Carregar mapeamento de palavras
    mapeamento_palavras = carregar_mapeamento_palavras()
    print(f"   Mapeamento de palavras carregado: {len(mapeamento_palavras)} quest√µes")
    
    # Criar dicion√°rio de dados
    print("üìù Gerando dicion√°rio de dados...")
    
    dicionario_texto = []
    
    # Cabe√ßalho
    dicionario_texto.append("="*100)
    dicionario_texto.append("DICION√ÅRIO DE DADOS - TABELA BRUTA WORDGEN FASE 2")
    dicionario_texto.append("VOCABUL√ÅRIO - AN√ÅLISE PR√â/P√ìS-TESTE")
    dicionario_texto.append("="*100)
    dicionario_texto.append(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    dicionario_texto.append(f"Fonte: {arquivo_excel if os.path.exists(arquivo_excel) else arquivo_csv}")
    dicionario_texto.append("="*100)
    
    # Informa√ß√µes gerais
    dicionario_texto.append("")
    dicionario_texto.append("üìä INFORMA√á√ïES GERAIS")
    dicionario_texto.append("-" * 50)
    
    # Carregar dados completos para estat√≠sticas
    if os.path.exists(arquivo_excel):
        df_completo = pd.read_excel(arquivo_excel)
    else:
        df_completo = pd.read_csv(arquivo_csv, encoding='utf-8-sig')
    
    dicionario_texto.append(f"Total de registros: {len(df_completo)}")
    dicionario_texto.append(f"Total de colunas: {len(df_completo.columns)}")
    dicionario_texto.append(f"Per√≠odo dos dados: 2023-2024")
    dicionario_texto.append(f"Tipo de an√°lise: Pr√©/P√≥s-teste pareado")
    dicionario_texto.append(f"Popula√ß√£o: Estudantes do 6¬∫ ao 9¬∫ ano")
    dicionario_texto.append(f"Interven√ß√£o: WordGen (programa de vocabul√°rio)")
    
    # Distribui√ß√µes
    dicionario_texto.append("")
    dicionario_texto.append("üë• DISTRIBUI√á√ïES")
    dicionario_texto.append("-" * 50)
    
    # Por grupo et√°rio
    grupos = df_completo['GrupoEtario'].value_counts()
    dicionario_texto.append("Por Grupo Et√°rio:")
    for grupo, count in grupos.items():
        percent = (count / len(df_completo)) * 100
        dicionario_texto.append(f"  ‚Ä¢ {grupo}: {count} estudantes ({percent:.1f}%)")
    
    # Por escola
    dicionario_texto.append("")
    dicionario_texto.append("Por Escola:")
    escolas = df_completo['Escola'].value_counts()
    for escola, count in escolas.items():
        percent = (count / len(df_completo)) * 100
        dicionario_texto.append(f"  ‚Ä¢ {escola}: {count} estudantes ({percent:.1f}%)")
    
    # Estrutura dos dados
    dicionario_texto.append("")
    dicionario_texto.append("üìã ESTRUTURA DOS DADOS")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append("A tabela est√° organizada em tr√™s se√ß√µes principais:")
    dicionario_texto.append("1. IDENTIFICA√á√ÉO (11 colunas): Dados do estudante e scores gerais")
    dicionario_texto.append("2. QUEST√ïES PR√â-TESTE (50 colunas): Respostas individuais no pr√©-teste")
    dicionario_texto.append("3. QUEST√ïES P√ìS-TESTE (50 colunas): Respostas individuais no p√≥s-teste")
    dicionario_texto.append("4. QUEST√ïES DELTA (50 colunas): Diferen√ßas entre p√≥s e pr√©-teste")
    dicionario_texto.append("")
    dicionario_texto.append("Total: 161 colunas")
    
    # Se√ß√£o 1: Colunas de Identifica√ß√£o
    dicionario_texto.append("")
    dicionario_texto.append("="*100)
    dicionario_texto.append("SE√á√ÉO 1: COLUNAS DE IDENTIFICA√á√ÉO E SCORES GERAIS (11 colunas)")
    dicionario_texto.append("="*100)
    
    colunas_identificacao = [
        ("ID_Unico", "Texto", "Identificador √∫nico do estudante", "Formato: 'Nome_Turma' para evitar duplicatas"),
        ("Nome", "Texto", "Nome completo do estudante", "Conforme registro escolar"),
        ("Escola", "Texto", "Nome da escola", "5 escolas participantes do estudo"),
        ("Turma", "Texto", "Turma do estudante", "Formato: '6¬∫ ANO - A', '7¬∞ ANO B', etc."),
        ("GrupoEtario", "Categ√≥rica", "Classifica√ß√£o por faixa et√°ria", "Valores: '6¬∫/7¬∫ anos' ou '8¬∫/9¬∫ anos'"),
        ("Score_Pre", "Num√©rica", "Pontua√ß√£o total no pr√©-teste", "Faixa: 0-100 pontos (soma de Q1-Q50)"),
        ("Score_Pos", "Num√©rica", "Pontua√ß√£o total no p√≥s-teste", "Faixa: 0-100 pontos (soma de Q1-Q50)"),
        ("Delta_Score", "Num√©rica", "Diferen√ßa entre p√≥s e pr√©-teste", "Faixa: -100 a +100 (Score_Pos - Score_Pre)"),
        ("Questoes_Validas", "Num√©rica", "N√∫mero de quest√µes v√°lidas respondidas", "Faixa: 40-50 (m√≠nimo 80% para inclus√£o)"),
        ("Percentual_Pre", "Num√©rica", "Percentual de acerto no pr√©-teste", "Faixa: 0-100% (Score_Pre/100)"),
        ("Percentual_Pos", "Num√©rica", "Percentual de acerto no p√≥s-teste", "Faixa: 0-100% (Score_Pos/100)")
    ]
    
    for i, (coluna, tipo, descricao, detalhes) in enumerate(colunas_identificacao, 1):
        dicionario_texto.append(f"{i:2d}. {coluna}")
        dicionario_texto.append(f"    Tipo: {tipo}")
        dicionario_texto.append(f"    Descri√ß√£o: {descricao}")
        dicionario_texto.append(f"    Detalhes: {detalhes}")
        if i < len(colunas_identificacao):
            dicionario_texto.append("")
    
    # Se√ß√£o 2, 3, 4: Quest√µes
    dicionario_texto.append("")
    dicionario_texto.append("="*100)
    dicionario_texto.append("SE√á√ÉO 2-4: QUEST√ïES DE VOCABUL√ÅRIO (150 colunas)")
    dicionario_texto.append("="*100)
    
    dicionario_texto.append("")
    dicionario_texto.append("üìö ESTRUTURA DAS QUEST√ïES")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append("Para cada uma das 50 quest√µes de vocabul√°rio, h√° 3 colunas:")
    dicionario_texto.append("")
    dicionario_texto.append("Formato: Q##_[TIPO]_[PALAVRA]")
    dicionario_texto.append("  ‚Ä¢ Q##_Pre_[palavra]: Resposta no pr√©-teste")
    dicionario_texto.append("  ‚Ä¢ Q##_Pos_[palavra]: Resposta no p√≥s-teste")
    dicionario_texto.append("  ‚Ä¢ Q##_Delta_[palavra]: Diferen√ßa (P√≥s - Pr√©)")
    dicionario_texto.append("")
    dicionario_texto.append("Onde:")
    dicionario_texto.append("  ## = N√∫mero da quest√£o (01 a 50)")
    dicionario_texto.append("  [palavra] = Palavra trabalhada na quest√£o")
    
    dicionario_texto.append("")
    dicionario_texto.append("üìä CODIFICA√á√ÉO DAS RESPOSTAS")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append("Valores das colunas Pre e Pos:")
    dicionario_texto.append("  0 = Erro (resposta incorreta)")
    dicionario_texto.append("  1 = Acerto parcial (resposta parcialmente correta)")
    dicionario_texto.append("  2 = Acerto total (resposta completamente correta)")
    dicionario_texto.append("  (vazio) = N√£o respondido ou valor inv√°lido (D/M no original)")
    dicionario_texto.append("")
    dicionario_texto.append("Valores das colunas Delta:")
    dicionario_texto.append("  -2 = Piorou muito (de 2 para 0)")
    dicionario_texto.append("  -1 = Piorou (de 2 para 1, ou de 1 para 0)")
    dicionario_texto.append("   0 = Manteve (mesmo valor)")
    dicionario_texto.append("  +1 = Melhorou (de 0 para 1, ou de 1 para 2)")
    dicionario_texto.append("  +2 = Melhorou muito (de 0 para 2)")
    dicionario_texto.append("  (vazio) = N√£o foi poss√≠vel calcular")
    
    # Lista completa das 50 quest√µes
    dicionario_texto.append("")
    dicionario_texto.append("="*100)
    dicionario_texto.append("LISTA COMPLETA DAS 50 QUEST√ïES DE VOCABUL√ÅRIO")
    dicionario_texto.append("="*100)
    
    dicionario_texto.append("")
    dicionario_texto.append("Cada quest√£o avalia o conhecimento de uma palavra espec√≠fica.")
    dicionario_texto.append("O estudante deve escolher o significado correto entre alternativas.")
    dicionario_texto.append("")
    
    for i in range(1, 51):
        if str(i) in mapeamento_palavras:
            palavra_info = mapeamento_palavras[str(i)]
            palavra_trabalhada = palavra_info['palavra_trabalhada']
            palavra_correta = palavra_info['palavra_correta']
            
            dicionario_texto.append(f"Q{i:02d} - {palavra_trabalhada}")
            dicionario_texto.append(f"     Colunas: Q{i:02d}_Pre_{palavra_trabalhada}, Q{i:02d}_Pos_{palavra_trabalhada}, Q{i:02d}_Delta_{palavra_trabalhada}")
            dicionario_texto.append(f"     Resposta correta: {palavra_correta}")
            dicionario_texto.append("")
        else:
            dicionario_texto.append(f"Q{i:02d} - Palavra_{i}")
            dicionario_texto.append(f"     Colunas: Q{i:02d}_Pre_Palavra_{i}, Q{i:02d}_Pos_Palavra_{i}, Q{i:02d}_Delta_Palavra_{i}")
            dicionario_texto.append(f"     Resposta correta: N/A")
            dicionario_texto.append("")
    
    # Crit√©rios de inclus√£o
    dicionario_texto.append("="*100)
    dicionario_texto.append("CRIT√âRIOS DE INCLUS√ÉO E PR√â-PROCESSAMENTO")
    dicionario_texto.append("="*100)
    
    dicionario_texto.append("")
    dicionario_texto.append("üìã CRIT√âRIOS DE INCLUS√ÉO")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append("Para ser inclu√≠do na tabela final, o estudante deve atender:")
    dicionario_texto.append("")
    dicionario_texto.append("1. PARTICIPA√á√ÉO COMPLETA:")
    dicionario_texto.append("   ‚Ä¢ Presen√ßa nos dados de pr√©-teste E p√≥s-teste")
    dicionario_texto.append("   ‚Ä¢ Identifica√ß√£o v√°lida (Nome + Turma)")
    dicionario_texto.append("")
    dicionario_texto.append("2. QUALIDADE DOS DADOS:")
    dicionario_texto.append("   ‚Ä¢ Pelo menos 40 quest√µes respondidas (80% de 50)")
    dicionario_texto.append("   ‚Ä¢ Respostas em formato v√°lido (0, 1, 2, D, M)")
    dicionario_texto.append("")
    dicionario_texto.append("3. CONSIST√äNCIA:")
    dicionario_texto.append("   ‚Ä¢ Mesmo estudante identificado em ambos os testes")
    dicionario_texto.append("   ‚Ä¢ Dados completos de identifica√ß√£o")
    
    dicionario_texto.append("")
    dicionario_texto.append("üîÑ TRANSFORMA√á√ïES APLICADAS")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append("1. VALORES DAS QUEST√ïES:")
    dicionario_texto.append("   ‚Ä¢ Padroniza√ß√£o para 0, 1, 2 (num√©rico)")
    dicionario_texto.append("   ‚Ä¢ Convers√£o D/M para valores vazios (missing)")
    dicionario_texto.append("   ‚Ä¢ Remo√ß√£o de espa√ßos e caracteres especiais")
    dicionario_texto.append("")
    dicionario_texto.append("2. IDENTIFICA√á√ÉO:")
    dicionario_texto.append("   ‚Ä¢ Cria√ß√£o de ID_Unico (Nome_Turma)")
    dicionario_texto.append("   ‚Ä¢ Classifica√ß√£o em grupos et√°rios")
    dicionario_texto.append("   ‚Ä¢ Padroniza√ß√£o de nomes de escolas")
    dicionario_texto.append("")
    dicionario_texto.append("3. C√ÅLCULOS:")
    dicionario_texto.append("   ‚Ä¢ Score_Pre/Pos: Soma de todas as quest√µes v√°lidas")
    dicionario_texto.append("   ‚Ä¢ Delta_Score: Diferen√ßa simples (P√≥s - Pr√©)")
    dicionario_texto.append("   ‚Ä¢ Percentuais: (Score / M√°ximo poss√≠vel) √ó 100")
    dicionario_texto.append("   ‚Ä¢ Quest√µes_Validas: Contagem de respostas n√£o vazias")
    
    # Estat√≠sticas descritivas
    dicionario_texto.append("")
    dicionario_texto.append("="*100)
    dicionario_texto.append("ESTAT√çSTICAS DESCRITIVAS")
    dicionario_texto.append("="*100)
    
    dicionario_texto.append("")
    dicionario_texto.append("üìà SCORES GERAIS")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append(f"Score Pr√©-teste:")
    dicionario_texto.append(f"  ‚Ä¢ M√©dia: {df_completo['Score_Pre'].mean():.2f}")
    dicionario_texto.append(f"  ‚Ä¢ Desvio padr√£o: {df_completo['Score_Pre'].std():.2f}")
    dicionario_texto.append(f"  ‚Ä¢ M√≠nimo: {df_completo['Score_Pre'].min():.0f}")
    dicionario_texto.append(f"  ‚Ä¢ M√°ximo: {df_completo['Score_Pre'].max():.0f}")
    dicionario_texto.append("")
    dicionario_texto.append(f"Score P√≥s-teste:")
    dicionario_texto.append(f"  ‚Ä¢ M√©dia: {df_completo['Score_Pos'].mean():.2f}")
    dicionario_texto.append(f"  ‚Ä¢ Desvio padr√£o: {df_completo['Score_Pos'].std():.2f}")
    dicionario_texto.append(f"  ‚Ä¢ M√≠nimo: {df_completo['Score_Pos'].min():.0f}")
    dicionario_texto.append(f"  ‚Ä¢ M√°ximo: {df_completo['Score_Pos'].max():.0f}")
    dicionario_texto.append("")
    dicionario_texto.append(f"Delta Score (Mudan√ßa):")
    dicionario_texto.append(f"  ‚Ä¢ M√©dia: {df_completo['Delta_Score'].mean():.2f}")
    dicionario_texto.append(f"  ‚Ä¢ Desvio padr√£o: {df_completo['Delta_Score'].std():.2f}")
    dicionario_texto.append(f"  ‚Ä¢ M√≠nimo: {df_completo['Delta_Score'].min():.0f}")
    dicionario_texto.append(f"  ‚Ä¢ M√°ximo: {df_completo['Delta_Score'].max():.0f}")
    
    # Distribui√ß√£o de mudan√ßas
    melhoraram = len(df_completo[df_completo['Delta_Score'] > 0])
    pioraram = len(df_completo[df_completo['Delta_Score'] < 0])
    mantiveram = len(df_completo[df_completo['Delta_Score'] == 0])
    
    dicionario_texto.append("")
    dicionario_texto.append("üìä DISTRIBUI√á√ÉO DE MUDAN√áAS")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append(f"Melhoraram: {melhoraram} estudantes ({(melhoraram/len(df_completo)*100):.1f}%)")
    dicionario_texto.append(f"Pioraram: {pioraram} estudantes ({(pioraram/len(df_completo)*100):.1f}%)")
    dicionario_texto.append(f"Mantiveram: {mantiveram} estudantes ({(mantiveram/len(df_completo)*100):.1f}%)")
    
    # Informa√ß√µes de uso
    dicionario_texto.append("")
    dicionario_texto.append("="*100)
    dicionario_texto.append("INFORMA√á√ïES DE USO")
    dicionario_texto.append("="*100)
    
    dicionario_texto.append("")
    dicionario_texto.append("üí° COMO USAR ESTA TABELA")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append("1. AN√ÅLISES POR ESTUDANTE:")
    dicionario_texto.append("   ‚Ä¢ Use ID_Unico como chave prim√°ria")
    dicionario_texto.append("   ‚Ä¢ Analise Score_Pre, Score_Pos, Delta_Score para performance geral")
    dicionario_texto.append("   ‚Ä¢ Examine quest√µes espec√≠ficas para an√°lise detalhada")
    dicionario_texto.append("")
    dicionario_texto.append("2. AN√ÅLISES POR GRUPO:")
    dicionario_texto.append("   ‚Ä¢ Filtre por 'Escola' para compara√ß√µes entre escolas")
    dicionario_texto.append("   ‚Ä¢ Filtre por 'GrupoEtario' para an√°lises de faixa et√°ria")
    dicionario_texto.append("   ‚Ä¢ Use 'Turma' para an√°lises por classe")
    dicionario_texto.append("")
    dicionario_texto.append("3. AN√ÅLISES POR PALAVRA:")
    dicionario_texto.append("   ‚Ä¢ Use colunas Q##_Pre_[palavra] para dificuldade inicial")
    dicionario_texto.append("   ‚Ä¢ Use colunas Q##_Pos_[palavra] para performance final")
    dicionario_texto.append("   ‚Ä¢ Use colunas Q##_Delta_[palavra] para identificar melhoria")
    dicionario_texto.append("")
    dicionario_texto.append("4. C√ÅLCULOS PERSONALIZADOS:")
    dicionario_texto.append("   ‚Ä¢ Effect Size: (M√©dia_P√≥s - M√©dia_Pr√©) / DP_Pr√©")
    dicionario_texto.append("   ‚Ä¢ Taxa de acerto: Score / (Questoes_Validas √ó 2)")
    dicionario_texto.append("   ‚Ä¢ Ganho relativo: Delta_Score / Score_Pre")
    
    dicionario_texto.append("")
    dicionario_texto.append("‚ö†Ô∏è LIMITA√á√ïES E CUIDADOS")
    dicionario_texto.append("-" * 50)
    dicionario_texto.append("1. DADOS FALTANTES:")
    dicionario_texto.append("   ‚Ä¢ Valores vazios em quest√µes indicam n√£o-resposta ou D/M")
    dicionario_texto.append("   ‚Ä¢ N√£o interprete como zero - use an√°lises que lidem com missing")
    dicionario_texto.append("")
    dicionario_texto.append("2. DESENHO DO ESTUDO:")
    dicionario_texto.append("   ‚Ä¢ An√°lise pr√©-p√≥s sem grupo controle")
    dicionario_texto.append("   ‚Ä¢ Mudan√ßas podem ter outras causas al√©m da interven√ß√£o")
    dicionario_texto.append("   ‚Ä¢ Considere efeitos de matura√ß√£o e outras vari√°veis")
    dicionario_texto.append("")
    dicionario_texto.append("3. INTERPRETA√á√ÉO:")
    dicionario_texto.append("   ‚Ä¢ Effect sizes pequenos podem ser educacionalmente relevantes")
    dicionario_texto.append("   ‚Ä¢ Considere heterogeneidade entre escolas e estudantes")
    dicionario_texto.append("   ‚Ä¢ Analise distribui√ß√£o, n√£o apenas m√©dias")
    
    # Rodap√©
    dicionario_texto.append("")
    dicionario_texto.append("="*100)
    dicionario_texto.append("INFORMA√á√ïES T√âCNICAS")
    dicionario_texto.append("="*100)
    
    dicionario_texto.append("")
    dicionario_texto.append(f"Arquivo original PR√â: Fase2/Pre/Avalia√ß√£o de vocabul√°rio - Rela√ß√£oCompletaAlunos.xlsx")
    dicionario_texto.append(f"Arquivo original P√ìS: Fase2/Pos/Avalia√ß√£o de vocabul√°rio - Rela√ß√£oCompletaAlunos (...).xlsx")
    dicionario_texto.append(f"Mapeamento de palavras: RespostaVocabulario.json")
    dicionario_texto.append(f"")
    dicionario_texto.append(f"Processamento:")
    dicionario_texto.append(f"  ‚Ä¢ Software: Python 3.x com pandas")
    dicionario_texto.append(f"  ‚Ä¢ Codifica√ß√£o: UTF-8")
    dicionario_texto.append(f"  ‚Ä¢ Formato de sa√≠da: CSV e Excel")
    dicionario_texto.append(f"")
    dicionario_texto.append(f"Contato: Pipeline gerado automaticamente")
    dicionario_texto.append(f"Vers√£o: 1.0")
    dicionario_texto.append(f"Data: {datetime.now().strftime('%d/%m/%Y')}")
    
    dicionario_texto.append("")
    dicionario_texto.append("="*100)
    dicionario_texto.append("FIM DO DICION√ÅRIO DE DADOS")
    dicionario_texto.append("="*100)
    
    # Salvar arquivo
    arquivo_dicionario = os.path.join(data_dir, 'dicionario_dados_tabela_bruta_fase2.txt')
    
    with open(arquivo_dicionario, 'w', encoding='utf-8') as f:
        f.write('\n'.join(dicionario_texto))
    
    print("‚úÖ Dicion√°rio de dados gerado com sucesso!")
    print("="*80)
    print(f"üìÅ Arquivo: {arquivo_dicionario}")
    print(f"üìÑ Linhas: {len(dicionario_texto)}")
    print(f"üìä Colunas documentadas: {len(df.columns)}")
    print(f"üìö Quest√µes mapeadas: {len(mapeamento_palavras)}")
    print("="*80)
    
    # Mostrar preview
    print("\nüìã PREVIEW DO DICION√ÅRIO:")
    print("-" * 50)
    for linha in dicionario_texto[:15]:
        print(linha)
    print("...")
    print(f"[... mais {len(dicionario_texto)-15} linhas ...]")
    
    return arquivo_dicionario

def main():
    """Fun√ß√£o principal"""
    try:
        arquivo_gerado = gerar_dicionario_dados()
        print(f"\nüéØ Dicion√°rio completo salvo em:")
        print(f"   {arquivo_gerado}")
        return arquivo_gerado
    except Exception as e:
        print(f"\n‚ùå Erro durante gera√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    main()
